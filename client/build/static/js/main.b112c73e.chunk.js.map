{"version":3,"sources":["App/components/SearchResults.jsx","App/components/SearchForm.jsx","App/components/Card.jsx","App/components/Home.jsx","App/App.jsx","serviceWorker.js","index.jsx"],"names":["recipeArr","recipe","SearchForm","props","onChange","e","setState","target","name","value","onSubmit","preventDefault","state","search","cuisine","type","console","log","axios","post","then","result","sendToParent","this","className","id","placeholder","Component","myRecipes","saveToArray","data","push","recipes","localStorage","clear","setItem","JSON","stringify","store","Card","label","image","desc","src","alt","href","onClick","SearchResults","foundRecipes","map","item","key","uri","url","recipeSelection","getStoredItems","getItem","parse","Home","getFromSearchForm","searchResults","results","hits","showSearchResult","hideComponent","bind","length","index","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b112c73e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Card from './Card';\nimport './SearchResults.css';\n\nlet recipeArr;\nlet recipe;\n\nclass SearchResults extends Component {\n\n  componentDidUpdate() {\n    recipeArr = this.props.foundRecipes;\n    recipe = recipeArr.map(recipe => recipe.recipe);\n    console.log('ANOTHER LOG', recipe);\n  }\n\n  render() {\n    return (\n      <div className=\"searchContainer\">\n        {recipe ? (\n          <div className=\"list\">\n            {recipe.map(item => {\n              return(\n                <Card\n                key={item.uri}\n                label={item.label}\n                image={item.image}\n                desc={item.url}\n                  />\n              );\n            })}\n          </div>\n        ) : (\n          <div>\n            <h2>Loading results</h2>\n          </div>\n        )}\n        </div>\n    );\n  };\n}\n\nexport default SearchResults;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './SearchForm.css';\n\nclass SearchForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      search: '',\n      cuisine: 'Vegan',\n      type: 'Dinner'\n  };\n}\n\n  onChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value});\n  };\n\n  onSubmit = (e) => {\n    e.preventDefault();\n    const { search, cuisine, type } = this.state;\n    console.log('submit', this.state)\n\n    axios.post('/api/search', { search, cuisine, type})\n    .then(result => this.props.sendToParent(result));\n  }\n\n  render() {\n    const { search } = this.state;\n    return (\n      <div className=\"SearchForm\">\n        <h3>Let's find some recipes</h3>\n        <form onSubmit={this.onSubmit}>\n          <div className=\"home-search\">\n          <label>\n            <i className=\"fa fa-search searchIcon\"></i>\n            <input\n              id=\"search\"\n              type='text'\n              name='search'\n              placeholder='Example, muffin'\n              value={search}\n              onChange={this.onChange}\n              />\n              <button id=\"search-submit\" type='submit'>Search</button>\n          </label>\n          </div>\n          <div className=\"option-search\">\n            <label>\n              Select cuisine\n              <select value={this.state.value} onChange={this.onChange}>\n                <option value='vegetarian'>Vegetarian</option>\n                <option value='vegan'>Vegan</option>\n                <option value='red-meat-free'>Red meat free</option>\n              </select>\n            </label>\n            <label>\n              Select course\n              <select>\n                <option value='breakfast'>Breakfast</option>\n                <option value='lunch'>Lunch</option>\n                <option value='dinner'>Dinner</option>\n              </select>\n            </label>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default SearchForm;","import React from 'react';\nimport './Card.css';\nimport PropTypes from 'prop-types';\n\nlet myRecipes = [];\n\nconst store = () => {\n  const recipes = myRecipes;\n  localStorage.clear();\n  localStorage.setItem('recipes', JSON.stringify(recipes));\n  console.log('local', localStorage);\n};\n\nconst saveToArray = (data) => {\n  myRecipes.push(data);\n  console.log('array ', myRecipes)\n  store();\n};\n\nconst Card = props => {\n  const { label, image, desc } = props;\n  return (\n    <div className=\"Card\">\n      <p>{label}</p>\n      <img src={image} alt={label}></img>\n      <div className=\"controls\">\n        <button href={desc}>Get full recipe</button>\n        <button onClick={(data) => saveToArray({'label': label, 'image': image, 'url': desc })}>Add to selection</button>\n      </div>\n    </div>\n  );\n};\n\nCard.propTypes = {\n  label: PropTypes.string,\n  image: PropTypes.string,\n};\n\nexport default Card;","import React, { Component } from 'react';\nimport SearchForm from './SearchForm';\nimport SearchResults from './SearchResults';\nimport Card from './Card';\nimport './Home.css';\n\nlet recipeSelection = [];\nlet recipes = '';\n\nconst getStoredItems = () => {\n  const myRecipes = localStorage.getItem('recipes');\n  recipes = JSON.parse(myRecipes);\n  console.log('stored recipes ', recipes);\n  recipeSelection.push(recipes);\n  console.log('selection ', recipeSelection);\n};\n\nclass Home extends Component {\n  constructor() {\n    super();\n    this.state = {\n      showSearchResult: true,\n      recipes: '',\n    };\n    this.hideComponent = this.hideComponent.bind(this)\n  }\n\n  getFromSearchForm = (searchResults) => {\n    const results = searchResults.data.hits;\n    console.log('this state', results);\n    this.setState({recipes: results})\n  }\n\n  hideComponent(name) {\n    console.log('name ',name);\n    switch (name) {\n      case \"showSearchResult\":\n        this.setState({ showSearchResult: !this.state.showSearchResult });\n        break;\n    }\n  }\n\n  render() {\n    const { showSearchResult } = this.state;\n    return (\n      <div className=\"Home\">\n        <h1>Meal-finder</h1>\n        <div className=\"intro\">\n          <h3>Please find a recipe you like, using the search tools below.</h3>\n          <p>When you found something to your liking. Save the recipe to your list, and update your selection.</p>\n        </div>\n        <SearchForm sendToParent={this.getFromSearchForm.bind(this)}/>\n\n        <div className=\"search-controls\">\n          <button onClick={getStoredItems}>Update selection</button>\n\n          <button onClick={() => this.hideComponent(\"showSearchResult\")}>Toggle results</button>\n        </div>\n\n          {showSearchResult && <SearchResults foundRecipes={this.state.recipes}/>}\n          <h3>Your selection:</h3>\n          {recipes.length ? (\n            <div className=\"selection\">\n            {recipes.map((item, index) => {\n              return(\n                <Card \n                key={index}\n                label={item.label}\n                image={item.image}\n                desc={item.uri}\n                />\n              );\n            })}\n            </div>\n            ) : (\n              <div>\n                <h3>Please add something to the list</h3>\n              </div>\n            )}\n          </div>\n    );\n  };\n};\n\nexport default Home;\n","import React, { Component } from 'react';\nimport Home from './components/Home';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    const App = () => (\n      <div className=\"App\">\n        <Home />\n      </div>\n      )\n      return (\n        <App/>\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}