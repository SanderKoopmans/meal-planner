{"version":3,"sources":["App/components/Home.jsx","App/components/Card.jsx","App/components/List.jsx","App/App.jsx","serviceWorker.js","index.jsx"],"names":["Home","className","to","variant","Component","Card","props","label","image","List","getList","fetch","then","res","json","list","setState","hits","catch","err","console","log","state","this","recipe","map","item","title","length","key","uri","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"iSAkBeA,E,uKAbX,OACE,yBAAKC,UAAU,QACb,oCACA,kBAAC,IAAD,CAAMC,GAAI,UACR,4BAAQC,QAAQ,UAAhB,iB,GANSC,aCeJC,EAfF,SAAAC,GAAU,IACbC,EAAiBD,EAAjBC,MAAOC,EAAUF,EAAVE,MACf,OACE,yBAAKP,UAAU,QACb,2BAAIM,GACJ,2BAAIC,KC+CKC,E,kDAnDb,WAAYH,GAAO,IAAD,8BAChB,cAAMA,IAURI,QAAU,WACRC,MAAM,eACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAACD,KAAMA,EAAKE,UACvCC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAb1B,EAAKG,MAAQ,CACXP,KAAM,IAHQ,E,gEAQhBQ,KAAKb,Y,+BAUG,IACAK,EAASQ,KAAKD,MAAdP,KACRK,QAAQC,IAAI,WAAYE,KAAKD,MAAMP,MACnC,IAAMS,EAAST,EAAKU,KAAI,SAAAC,GAAI,OAAIA,EAAKF,UACrCJ,QAAQC,IAAI,cAAeG,GAC3B,IAAMG,EAAQH,EAAOC,KAAI,SAAAC,GAAI,OAAIA,EAAKnB,SAGtC,OAFAa,QAAQC,IAAI,UAAWM,GAGrB,yBAAK1B,UAAU,OACb,qDACCuB,EAAOI,OACN,6BACGJ,EAAOC,KAAI,SAAAC,GACV,OACE,kBAAC,EAAD,CACEG,IAAKH,EAAKI,IACVvB,MAAOmB,EAAKnB,MACZC,MAAOkB,EAAKlB,YAKpB,6BACE,6C,GA3COJ,aCqBJ2B,G,6KAhBX,IAAMA,EAAM,kBACV,6BACE,gCACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWlC,IACjC,kBAAC,IAAD,CAAOiC,KAAK,QAAQC,UAAWzB,OAInC,OACE,kBAAC,IAAD,KACE,kBAACsB,EAAD,W,GAZQ3B,cCME+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAgC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.5a99bc46.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"Home\">\n        <h1>Home</h1>\n        <Link to={'./list'}>\n          <button variant=\"raised\">\n            My List\n          </button>\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Card = props => {\n  const { label, image } = props;\n  return (\n    <div className=\"Card\">\n      <p>{label}</p>\n      <p>{image}</p>\n    </div>\n  );\n};\n\nCard.propTypes = {\n  label: PropTypes.string,\n  image: PropTypes.string,\n};\n\nexport default Card;","import React, { Component } from 'react';\nimport Card from './Card';\n\nclass List extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      list: []\n    }\n  }\n\n  componentDidMount() {\n    this.getList();\n  }\n\n  getList = () => {\n    fetch('api/getList')\n    .then(res => res.json())\n    .then(list => this.setState({list: list.hits}))\n    .catch(err => console.log(err));\n  }\n\n  render() {\n    const { list } = this.state;\n    console.log('THIS LOG', this.state.list);\n    const recipe = list.map(item => item.recipe);\n    console.log('ANOTHER LOG', recipe);\n    const title = recipe.map(item => item.label);\n    console.log('Title? ', title);\n\n    return (\n      <div className=\"App\">\n        <h1>Your list of recipes:</h1>\n        {recipe.length ? (\n          <div>\n            {recipe.map(item => {\n              return(\n                <Card \n                  key={item.uri}\n                  label={item.label}\n                  image={item.image} />\n              );\n            })}\n          </div>\n        ) : (\n          <div>\n            <h2>Loading</h2>\n          </div>\n        )\n      }\n      </div>\n    );\n  }\n}\n\nexport default List;\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Home from './components/Home';\nimport List from './components/List';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    const App = () => (\n      <div>\n        <switch>\n          <Route exact path='/' component={Home}/>\n          <Route path='/list' component={List}/>\n        </switch>\n      </div>\n      )\n      return (\n        <Switch>\n          <App/>\n        </Switch>\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}